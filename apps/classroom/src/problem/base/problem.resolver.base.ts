/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateProblemArgs } from "./CreateProblemArgs";
import { UpdateProblemArgs } from "./UpdateProblemArgs";
import { DeleteProblemArgs } from "./DeleteProblemArgs";
import { ProblemFindManyArgs } from "./ProblemFindManyArgs";
import { ProblemFindUniqueArgs } from "./ProblemFindUniqueArgs";
import { Problem } from "./Problem";
import { ProblemService } from "../problem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Problem)
export class ProblemResolverBase {
  constructor(
    protected readonly service: ProblemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Problem",
    action: "read",
    possession: "any",
  })
  async _problemsMeta(
    @graphql.Args() args: ProblemFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Problem])
  @nestAccessControl.UseRoles({
    resource: "Problem",
    action: "read",
    possession: "any",
  })
  async problems(
    @graphql.Args() args: ProblemFindManyArgs
  ): Promise<Problem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Problem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Problem",
    action: "read",
    possession: "own",
  })
  async problem(
    @graphql.Args() args: ProblemFindUniqueArgs
  ): Promise<Problem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Problem)
  @nestAccessControl.UseRoles({
    resource: "Problem",
    action: "create",
    possession: "any",
  })
  async createProblem(
    @graphql.Args() args: CreateProblemArgs
  ): Promise<Problem> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Problem)
  @nestAccessControl.UseRoles({
    resource: "Problem",
    action: "update",
    possession: "any",
  })
  async updateProblem(
    @graphql.Args() args: UpdateProblemArgs
  ): Promise<Problem | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Problem)
  @nestAccessControl.UseRoles({
    resource: "Problem",
    action: "delete",
    possession: "any",
  })
  async deleteProblem(
    @graphql.Args() args: DeleteProblemArgs
  ): Promise<Problem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
